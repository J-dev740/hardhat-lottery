{
  "address": "0x505FcC746346C021D62653FC59bB2E1D3fe4e4C2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gaslane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_sendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_upKeepNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upKeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bcc25d02824115f25b235d0a35ca2d9eefc78047ac7c749ad29f99f3acdf5d4",
  "receipt": {
    "to": null,
    "from": "0xa81DE2e4693b9fC3Bc16Ab56D148CC938203B430",
    "contractAddress": "0x505FcC746346C021D62653FC59bB2E1D3fe4e4C2",
    "transactionIndex": 57,
    "gasUsed": "1251476",
    "logsBloom": "0x
    "blockHash": "0x8cc7c0ad9f435f00c3d1deed875c6017660fe2d255fd78cd81c150ce551243f8",
    "transactionHash": "0x0bcc25d02824115f25b235d0a35ca2d9eefc78047ac7c749ad29f99f3acdf5d4",
    "logs": [],
    "blockNumber": 3988583,
    "cumulativeGasUsed": "16046308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "4028",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "2300000"
  ],
  "numDeployments": 6,
  "solcInputHash": "7593db6229ae30da7693bd0d534c0d9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_sendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_upKeepNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upKeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external  returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external ;\\n}\\n\",\"keccak256\":\"0x3375479ba832f71fd44507104c75ba64b31ea8b167f84f731a1c307f965204b6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\n\\r\\n//main structure of smartcontracts can be defined in Natspec format\\r\\n/*\\r\\n1. pragma statements\\r\\n2. import statements\\r\\n3. interface statements\\r\\n4. libraries \\r\\n5. contracts\\r\\n    5.1 type declarations\\r\\n    5.2 state variables\\r\\n    5.3 events \\r\\n    5.4 errors\\r\\n    5.5 modifies \\r\\n    5.6 functions \\r\\n    5.7 view/pure functions\\r\\n\\r\\n*/\\r\\n//pragma statements\\r\\n\\r\\n//interface \\r\\n\\r\\n//libraries \\r\\n\\r\\n//contracts \\r\\n\\r\\n    // allow players to enter the raffle\\r\\n    //pick a randomWinner\\r\\n    //publish the recent lottery winner\\r\\ncontract Raffle is VRFConsumerBaseV2,AutomationCompatibleInterface {\\r\\n    //type declarations\\r\\n    enum RaffleState{\\r\\n\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    //state variables\\r\\n        //chainlink vrf variables\\r\\n       VRFCoordinatorV2Interface private immutable  i_vrfCoordinator;\\r\\n       uint64 private immutable i_subscriptionId;\\r\\n       uint256 private requestId;\\r\\n       bytes32 private immutable i_gaslane;\\r\\n       uint32 private immutable i_callbackGasLimit;\\r\\n       uint16 private constant  REQUEST_CONFIRMATIONS=3;\\r\\n       uint32 private constant NUM_WORDS=1;\\r\\n\\r\\n\\r\\n         //lottery variables\\r\\n        uint256 private immutable i_entranceFee;\\r\\n        address payable[] private  s_players;\\r\\n        RaffleState private s_raffleState;\\r\\n        uint256 private i_interval;\\r\\n        uint256 private s_lastTimeStamp;\\r\\n        address  private s_recentWinner;\\r\\n    //events \\r\\n    event RequestedRaffleWinner(uint256 indexed  requestId);\\r\\n    event RaffleEnter(address indexed player );\\r\\n    event WinnerPicked(address indexed player);\\r\\n    //errors\\r\\n    error  Raffle_sendMoreToEnterRaffle();\\r\\n    error Raffle_RaffleNotOpen();\\r\\n    error Raffle_upKeepNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n    error Raffle_TransferFailed();\\r\\n    //modfiers\\r\\n    //functions \\r\\n    constructor(\\r\\n        uint256 entranceFee,\\r\\n        address vrfCoordinatorV2,\\r\\n        uint64 subscriptionId,\\r\\n        bytes32 gaslane,//keyhash\\r\\n        uint256 interval,\\r\\n        uint32 callbackGasLimit\\r\\n\\r\\n    )VRFConsumerBaseV2(vrfCoordinatorV2)\\r\\n    {\\r\\n        i_vrfCoordinator=VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_entranceFee= entranceFee;\\r\\n        i_gaslane= gaslane;\\r\\n        i_interval= interval;\\r\\n        i_subscriptionId=subscriptionId;\\r\\n        i_callbackGasLimit=callbackGasLimit;\\r\\n         s_lastTimeStamp=block.timestamp;\\r\\n         s_raffleState= RaffleState.OPEN;\\r\\n    }\\r\\n    function enterRaffle() public payable {\\r\\n        //define min eth to enter the raffle\\r\\n        // require(msg.value>i_entranceFee,\\\"Not enough eth\\\");\\r\\n        if (msg.value<i_entranceFee) revert Raffle_sendMoreToEnterRaffle();\\r\\n        if( s_raffleState!=RaffleState.OPEN) revert Raffle_RaffleNotOpen();\\r\\n        s_players.push(payable(msg.sender));\\r\\n        //push the players into an array  who entered the raffle\\r\\n        emit RaffleEnter(msg.sender);\\r\\n\\r\\n    }\\r\\n   //random winner is picked by dividing this method into two methods   \\r\\n        //checkUpKeep\\r\\n        //PerformUpKeep\\r\\n        function checkUpkeep(\\r\\n            bytes memory /*checkData*/\\r\\n            )public view override  returns(\\r\\n            bool upKeepNeeded,\\r\\n            bytes memory /*performData*/\\r\\n            )\\r\\n            {\\r\\n            //check for UpKeep based on four conditions\\r\\n            //if RaffleState is open\\r\\n            //if interval has surpasssed for upKeep\\r\\n            //if min no of players are available\\r\\n            //if contract has min eth \\r\\n            bool state= s_raffleState==RaffleState.OPEN;\\r\\n            bool time= ((block.timestamp-s_lastTimeStamp)>i_interval);\\r\\n            bool number= s_players.length >0;\\r\\n            bool has_balance= address(this).balance>0;\\r\\n             upKeepNeeded =(state && time && number && has_balance );\\r\\n             return (upKeepNeeded,\\\"0x0\\\");//can we comment this out\\r\\n\\r\\n            }\\r\\n\\r\\n        function performUpkeep(\\r\\n            bytes calldata\\r\\n            //  performData\\r\\n            ) external override {\\r\\n            (bool upKeepNeeded,)=checkUpkeep(\\\"\\\");\\r\\n            if (!upKeepNeeded){\\r\\n                revert Raffle_upKeepNeeded(\\r\\n                    address(this).balance ,\\r\\n                    s_players.length,\\r\\n                    uint256(s_raffleState)\\r\\n                );\\r\\n            }\\r\\n            s_raffleState=RaffleState.CALCULATING;\\r\\n             requestId=i_vrfCoordinator.requestRandomWords(\\r\\n                i_gaslane,\\r\\n                i_subscriptionId,\\r\\n                REQUEST_CONFIRMATIONS,\\r\\n                i_callbackGasLimit,\\r\\n                NUM_WORDS\\r\\n            );\\r\\n            emit RequestedRaffleWinner(requestId);\\r\\n\\r\\n        }\\r\\n\\r\\n        function fulfillRandomWords(\\r\\n            uint256, /* requestId */\\r\\n            uint256[] memory randomWords\\r\\n            ) internal override{\\r\\n            uint256 indexOfWinner= randomWords[0]%s_players.length;\\r\\n            address payable recentWinner= s_players[indexOfWinner];\\r\\n            s_recentWinner = recentWinner;\\r\\n            s_lastTimeStamp=block.timestamp;\\r\\n            s_players=new address payable[] (0);\\r\\n            s_raffleState=RaffleState.OPEN;\\r\\n            (bool success,)= recentWinner.call{value:address(this).balance}(\\\"\\\");\\r\\n            if(!success) revert Raffle_TransferFailed();\\r\\n            else emit WinnerPicked(recentWinner);\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n    //view/pure functions \\r\\n    //getter functions\\r\\n    function getRaffleState() public view returns(RaffleState){\\r\\n        return s_raffleState;\\r\\n    }\\r\\n        //for functions returning hardcoded values such as const values view -> replaed by ->pure ie it lead to \\r\\n        //gas efficiency\\r\\n    function getNumWords() public pure  returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns( uint256 ) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address ){\\r\\n        return s_recentWinner;\\r\\n\\r\\n    }\\r\\n    function getLastTimeStamp() public view returns ( uint256){\\r\\n        return s_lastTimeStamp;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n    function getPlayer(uint256 index) public view returns (address){\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRequestId() public view returns (uint256){\\r\\n        return requestId;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x2828699bd8b7ee6f064ce22cd8561de289b6265b875b9b3a3fd0af91c58d9d45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200187a3803806200187a8339818101604052810190620000389190620001ab565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508561012081815250508260e08181525050816003819055508367ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508063ffffffff166101008163ffffffff1660e01b81525050426004819055506000600260006101000a81548160ff02191690836001811115620001275762000126620002b3565b5b021790555050505050505062000369565b6000815190506200014981620002e7565b92915050565b600081519050620001608162000301565b92915050565b60008151905062000177816200031b565b92915050565b6000815190506200018e8162000335565b92915050565b600081519050620001a5816200034f565b92915050565b60008060008060008060c08789031215620001cb57620001ca620002e2565b5b6000620001db89828a0162000166565b9650506020620001ee89828a0162000138565b95505060406200020189828a0162000194565b94505060606200021489828a016200014f565b93505060806200022789828a0162000166565b92505060a06200023a89828a016200017d565b9150509295509295509295565b6000620002548262000265565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f28162000247565b8114620002fe57600080fd5b50565b6200030c816200025b565b81146200031857600080fd5b50565b620003268162000285565b81146200033257600080fd5b50565b62000340816200028f565b81146200034c57600080fd5b50565b6200035a816200029f565b81146200036657600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c610120516114a7620003d3600039600081816103490152610446015260006106e9015260006106a5015260006106c60152600061066901526000818161038601526103da01526114a76000f3fe6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b806353a2c19a146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c5780634585e33b14610196578063473f1ddc146101bf576100dd565b8063077001b9146100e257806309bc33a71461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b60405161010491906110ad565b60405180910390f35b34801561011957600080fd5b50610122610345565b60405161012f91906110ad565b60405180910390f35b34801561014457600080fd5b5061014d61036d565b60405161015a9190611092565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610e86565b610384565b005b610194610444565b005b3480156101a257600080fd5b506101bd60048036038101906101b89190610d96565b6105b3565b005b3480156101cb57600080fd5b506101d46107b6565b6040516101e19190610fcb565b60405180910390f35b3480156101f657600080fd5b506101ff6107e0565b60405161020c91906110ad565b60405180910390f35b34801561022157600080fd5b5061022a6107ef565b60405161023791906110ad565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610de3565b6107fc565b60405161027592919061100f565b60405180910390f35b34801561028a57600080fd5b506102936108c5565b6040516102a091906110ad565b60405180910390f35b3480156102b557600080fd5b506102be6108cf565b6040516102cb91906110ad565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190610e2c565b6108d9565b6040516103089190610fcb565b60405180910390f35b34801561031d57600080fd5b50610326610921565b60405161033391906110ad565b60405180910390f35b60008054905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d929190610fe6565b60405180910390fd5b610440828261092e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561049e576040517fe405d1fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b2576104b1611387565b5b600260009054906101000a900460ff1660018111156104d4576104d3611387565b5b1461050b576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105cd604051806020016040528060008152506107fc565b5090508061063c5747600180549050600260009054906101000a900460ff1660018111156105fe576105fd611387565b5b6040517f18a2f666000000000000000000000000000000000000000000000000000000008152600401610633939291906110c8565b60405180910390fd5b6001600260006101000a81548160ff0219169083600181111561066257610661611387565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072a95949392919061103f565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610e59565b6000819055506000547fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561081557610814611387565b5b600260009054906101000a900460ff16600181111561083757610836611387565b5b14905060006003546004544261084d91906111a8565b1190506000806001805490501190506000804711905083801561086d5750825b80156108765750815b801561087f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600354905090565b6000600454905090565b6000600182815481106108ef576108ee6113b6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b60006001805490508260008151811061094a576109496113b6565b5b602002602001015161095c91906112f8565b9050600060018281548110610974576109736113b6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600481905550600067ffffffffffffffff811115610a0457610a036113e5565b5b604051908082528060200260200182016040528015610a325781602001602082028036833780820191505090505b5060019080519060200190610a48929190610b61565b506000600260006101000a81548160ff02191690836001811115610a6f57610a6e611387565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9a90610fb6565b60006040518083038185875af1925050503d8060008114610ad7576040519150601f19603f3d011682016040523d82523d6000602084013e610adc565b606091505b5050905080610b17576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bda579160200282015b82811115610bd95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b81565b5b509050610be79190610beb565b5090565b5b80821115610c04576000816000905550600101610bec565b5090565b6000610c1b610c1684611124565b6110ff565b90508083825260208201905082856020860282011115610c3e57610c3d61141e565b5b60005b85811015610c6e5781610c548882610d6c565b845260208401935060208301925050600181019050610c41565b5050509392505050565b6000610c8b610c8684611150565b6110ff565b905082815260208101848484011115610ca757610ca6611423565b5b610cb2848285611285565b509392505050565b600082601f830112610ccf57610cce611419565b5b8135610cdf848260208601610c08565b91505092915050565b60008083601f840112610cfe57610cfd611419565b5b8235905067ffffffffffffffff811115610d1b57610d1a611414565b5b602083019150836001820283011115610d3757610d3661141e565b5b9250929050565b600082601f830112610d5357610d52611419565b5b8135610d63848260208601610c78565b91505092915050565b600081359050610d7b8161145a565b92915050565b600081519050610d908161145a565b92915050565b60008060208385031215610dad57610dac61142d565b5b600083013567ffffffffffffffff811115610dcb57610dca611428565b5b610dd785828601610ce8565b92509250509250929050565b600060208284031215610df957610df861142d565b5b600082013567ffffffffffffffff811115610e1757610e16611428565b5b610e2384828501610d3e565b91505092915050565b600060208284031215610e4257610e4161142d565b5b6000610e5084828501610d6c565b91505092915050565b600060208284031215610e6f57610e6e61142d565b5b6000610e7d84828501610d81565b91505092915050565b60008060408385031215610e9d57610e9c61142d565b5b6000610eab85828601610d6c565b925050602083013567ffffffffffffffff811115610ecc57610ecb611428565b5b610ed885828601610cba565b9150509250929050565b610eeb816111dc565b82525050565b610efa816111ee565b82525050565b610f09816111fa565b82525050565b6000610f1a82611181565b610f24818561118c565b9350610f34818560208601611294565b610f3d81611432565b840191505092915050565b610f5181611273565b82525050565b6000610f6460008361119d565b9150610f6f82611443565b600082019050919050565b610f8381611217565b82525050565b610f9281611245565b82525050565b610fa18161124f565b82525050565b610fb08161125f565b82525050565b6000610fc182610f57565b9150819050919050565b6000602082019050610fe06000830184610ee2565b92915050565b6000604082019050610ffb6000830185610ee2565b6110086020830184610ee2565b9392505050565b60006040820190506110246000830185610ef1565b81810360208301526110368184610f0f565b90509392505050565b600060a0820190506110546000830188610f00565b6110616020830187610fa7565b61106e6040830186610f7a565b61107b6060830185610f98565b6110886080830184610f98565b9695505050505050565b60006020820190506110a76000830184610f48565b92915050565b60006020820190506110c26000830184610f89565b92915050565b60006060820190506110dd6000830186610f89565b6110ea6020830185610f89565b6110f76040830184610f89565b949350505050565b600061110961111a565b905061111582826112c7565b919050565b6000604051905090565b600067ffffffffffffffff82111561113f5761113e6113e5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561116b5761116a6113e5565b5b61117482611432565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111b382611245565b91506111be83611245565b9250828210156111d1576111d0611329565b5b828203905092915050565b60006111e782611225565b9050919050565b60008115159050919050565b6000819050919050565b600081905061121282611446565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061127e82611204565b9050919050565b82818337600083830152505050565b60005b838110156112b2578082015181840152602081019050611297565b838111156112c1576000848401525b50505050565b6112d082611432565b810181811067ffffffffffffffff821117156112ef576112ee6113e5565b5b80604052505050565b600061130382611245565b915061130e83611245565b92508261131e5761131d611358565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061145757611456611387565b5b50565b61146381611245565b811461146e57600080fd5b5056fea264697066735822122023d651c797c4c92fb61ce9e4810146ecfc05a086fb7744d7c860db6018e96d0364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b41461027e578063c1c244e8146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b806353a2c19a146101ea5780635f1b0fd8146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c5780634585e33b14610196578063473f1ddc146101bf576100dd565b8063077001b9146100e257806309bc33a71461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b60405161010491906110ad565b60405180910390f35b34801561011957600080fd5b50610122610345565b60405161012f91906110ad565b60405180910390f35b34801561014457600080fd5b5061014d61036d565b60405161015a9190611092565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610e86565b610384565b005b610194610444565b005b3480156101a257600080fd5b506101bd60048036038101906101b89190610d96565b6105b3565b005b3480156101cb57600080fd5b506101d46107b6565b6040516101e19190610fcb565b60405180910390f35b3480156101f657600080fd5b506101ff6107e0565b60405161020c91906110ad565b60405180910390f35b34801561022157600080fd5b5061022a6107ef565b60405161023791906110ad565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190610de3565b6107fc565b60405161027592919061100f565b60405180910390f35b34801561028a57600080fd5b506102936108c5565b6040516102a091906110ad565b60405180910390f35b3480156102b557600080fd5b506102be6108cf565b6040516102cb91906110ad565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190610e2c565b6108d9565b6040516103089190610fcb565b60405180910390f35b34801561031d57600080fd5b50610326610921565b60405161033391906110ad565b60405180910390f35b60008054905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d929190610fe6565b60405180910390fd5b610440828261092e565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561049e576040517fe405d1fd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b2576104b1611387565b5b600260009054906101000a900460ff1660018111156104d4576104d3611387565b5b1461050b576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105cd604051806020016040528060008152506107fc565b5090508061063c5747600180549050600260009054906101000a900460ff1660018111156105fe576105fd611387565b5b6040517f18a2f666000000000000000000000000000000000000000000000000000000008152600401610633939291906110c8565b60405180910390fd5b6001600260006101000a81548160ff0219169083600181111561066257610661611387565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072a95949392919061103f565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610e59565b6000819055506000547fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b60006060600080600181111561081557610814611387565b5b600260009054906101000a900460ff16600181111561083757610836611387565b5b14905060006003546004544261084d91906111a8565b1190506000806001805490501190506000804711905083801561086d5750825b80156108765750815b801561087f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6000600354905090565b6000600454905090565b6000600182815481106108ef576108ee6113b6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600180549050905090565b60006001805490508260008151811061094a576109496113b6565b5b602002602001015161095c91906112f8565b9050600060018281548110610974576109736113b6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600481905550600067ffffffffffffffff811115610a0457610a036113e5565b5b604051908082528060200260200182016040528015610a325781602001602082028036833780820191505090505b5060019080519060200190610a48929190610b61565b506000600260006101000a81548160ff02191690836001811115610a6f57610a6e611387565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9a90610fb6565b60006040518083038185875af1925050503d8060008114610ad7576040519150601f19603f3d011682016040523d82523d6000602084013e610adc565b606091505b5050905080610b17576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bda579160200282015b82811115610bd95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b81565b5b509050610be79190610beb565b5090565b5b80821115610c04576000816000905550600101610bec565b5090565b6000610c1b610c1684611124565b6110ff565b90508083825260208201905082856020860282011115610c3e57610c3d61141e565b5b60005b85811015610c6e5781610c548882610d6c565b845260208401935060208301925050600181019050610c41565b5050509392505050565b6000610c8b610c8684611150565b6110ff565b905082815260208101848484011115610ca757610ca6611423565b5b610cb2848285611285565b509392505050565b600082601f830112610ccf57610cce611419565b5b8135610cdf848260208601610c08565b91505092915050565b60008083601f840112610cfe57610cfd611419565b5b8235905067ffffffffffffffff811115610d1b57610d1a611414565b5b602083019150836001820283011115610d3757610d3661141e565b5b9250929050565b600082601f830112610d5357610d52611419565b5b8135610d63848260208601610c78565b91505092915050565b600081359050610d7b8161145a565b92915050565b600081519050610d908161145a565b92915050565b60008060208385031215610dad57610dac61142d565b5b600083013567ffffffffffffffff811115610dcb57610dca611428565b5b610dd785828601610ce8565b92509250509250929050565b600060208284031215610df957610df861142d565b5b600082013567ffffffffffffffff811115610e1757610e16611428565b5b610e2384828501610d3e565b91505092915050565b600060208284031215610e4257610e4161142d565b5b6000610e5084828501610d6c565b91505092915050565b600060208284031215610e6f57610e6e61142d565b5b6000610e7d84828501610d81565b91505092915050565b60008060408385031215610e9d57610e9c61142d565b5b6000610eab85828601610d6c565b925050602083013567ffffffffffffffff811115610ecc57610ecb611428565b5b610ed885828601610cba565b9150509250929050565b610eeb816111dc565b82525050565b610efa816111ee565b82525050565b610f09816111fa565b82525050565b6000610f1a82611181565b610f24818561118c565b9350610f34818560208601611294565b610f3d81611432565b840191505092915050565b610f5181611273565b82525050565b6000610f6460008361119d565b9150610f6f82611443565b600082019050919050565b610f8381611217565b82525050565b610f9281611245565b82525050565b610fa18161124f565b82525050565b610fb08161125f565b82525050565b6000610fc182610f57565b9150819050919050565b6000602082019050610fe06000830184610ee2565b92915050565b6000604082019050610ffb6000830185610ee2565b6110086020830184610ee2565b9392505050565b60006040820190506110246000830185610ef1565b81810360208301526110368184610f0f565b90509392505050565b600060a0820190506110546000830188610f00565b6110616020830187610fa7565b61106e6040830186610f7a565b61107b6060830185610f98565b6110886080830184610f98565b9695505050505050565b60006020820190506110a76000830184610f48565b92915050565b60006020820190506110c26000830184610f89565b92915050565b60006060820190506110dd6000830186610f89565b6110ea6020830185610f89565b6110f76040830184610f89565b949350505050565b600061110961111a565b905061111582826112c7565b919050565b6000604051905090565b600067ffffffffffffffff82111561113f5761113e6113e5565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561116b5761116a6113e5565b5b61117482611432565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111b382611245565b91506111be83611245565b9250828210156111d1576111d0611329565b5b828203905092915050565b60006111e782611225565b9050919050565b60008115159050919050565b6000819050919050565b600081905061121282611446565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061127e82611204565b9050919050565b82818337600083830152505050565b60005b838110156112b2578082015181840152602081019050611297565b838111156112c1576000848401525b50505050565b6112d082611432565b810181811067ffffffffffffffff821117156112ef576112ee6113e5565b5b80604052505050565b600061130382611245565b915061130e83611245565b92508261131e5761131d611358565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061145757611456611387565b5b50565b61146381611245565b811461146e57600080fd5b5056fea264697066735822122023d651c797c4c92fb61ce9e4810146ecfc05a086fb7744d7c860db6018e96d0364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 191,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "requestId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 206,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 209,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)184"
      },
      {
        "astId": 211,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_interval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 213,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 215,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)184": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}